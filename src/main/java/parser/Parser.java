
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import nodes.*;
import java.util.*;
import lexer.*;
import nodes.ExpressionNode.*;
import nodes.StatementNode.*;
import parser.Symbols;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\004\000\002\004" +
    "\002\000\002\004\004\000\002\003\005\000\002\012\003" +
    "\000\002\012\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\007\000\002\007" +
    "\017\000\002\007\016\000\002\007\016\000\002\007\015" +
    "\000\002\014\003\000\002\014\005\000\002\017\003\000" +
    "\002\017\003\000\002\016\003\000\002\016\002\000\002" +
    "\013\003\000\002\013\005\000\002\020\004\000\002\021" +
    "\003\000\002\021\005\000\002\015\003\000\002\015\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\025\011\000\002\025\007\000\002\024\011\000\002\030" +
    "\002\000\002\030\004\000\002\031\006\000\002\032\002" +
    "\000\002\032\004\000\002\026\006\000\002\027\006\000" +
    "\002\023\005\000\002\006\006\000\002\006\005\000\002" +
    "\005\003\000\002\005\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\006\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\014\004\uffff\006\013\007\012\010\011\011" +
    "\007\001\002\000\004\002\254\001\002\000\004\004\101" +
    "\001\002\000\004\055\015\001\002\000\010\030\ufff7\031" +
    "\ufff7\055\ufff7\001\002\000\030\004\uffff\006\013\007\012" +
    "\010\011\011\007\013\uffff\016\uffff\020\uffff\021\uffff\055" +
    "\uffff\057\uffff\001\002\000\010\030\ufff9\031\ufff9\055\ufff9" +
    "\001\002\000\010\030\ufff8\031\ufff8\055\ufff8\001\002\000" +
    "\010\030\ufffa\031\ufffa\055\ufffa\001\002\000\020\004\ufffe" +
    "\013\ufffe\016\ufffe\020\ufffe\021\ufffe\055\ufffe\057\ufffe\001" +
    "\002\000\010\017\076\031\ufff6\032\ufff6\001\002\000\006" +
    "\031\017\032\020\001\002\000\004\055\021\001\002\000" +
    "\030\004\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd" +
    "\016\ufffd\020\ufffd\021\ufffd\055\ufffd\057\ufffd\001\002\000" +
    "\010\017\022\031\ufff5\032\ufff5\001\002\000\024\034\023" +
    "\041\034\050\027\051\032\052\025\053\024\054\030\055" +
    "\033\056\031\001\002\000\024\034\023\041\034\050\027" +
    "\051\032\052\025\053\024\054\030\055\033\056\031\001" +
    "\002\000\046\005\uffc8\014\uffc8\022\uffc8\027\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\001\002\000\046\005\uffc9\014\uffc9\022\uffc9\027\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\001\002\000\036\031\ufff3\032\ufff3\033\042\034\037" +
    "\035\046\036\044\037\036\040\051\042\045\043\040\044" +
    "\050\045\043\046\041\047\047\001\002\000\046\005\uffcb" +
    "\014\uffcb\022\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\001\002\000\046\005" +
    "\uffc7\014\uffc7\022\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000\046" +
    "\005\uffcc\014\uffcc\022\uffcc\027\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\001\002\000" +
    "\046\005\uffca\014\uffca\022\uffca\027\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\001\002" +
    "\000\050\005\uffc6\014\uffc6\022\uffc6\026\066\027\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\001\002\000\024\034\023\041\034\050\027\051\032" +
    "\052\025\053\024\054\030\055\033\056\031\001\002\000" +
    "\046\005\uffb6\014\uffb6\022\uffb6\027\uffb6\031\uffb6\032\uffb6" +
    "\033\042\034\037\035\046\036\044\037\036\040\051\042" +
    "\045\043\040\044\050\045\043\046\041\047\047\001\002" +
    "\000\024\034\023\041\034\050\027\051\032\052\025\053" +
    "\024\054\030\055\033\056\031\001\002\000\024\034\023" +
    "\041\034\050\027\051\032\052\025\053\024\054\030\055" +
    "\033\056\031\001\002\000\024\034\023\041\034\050\027" +
    "\051\032\052\025\053\024\054\030\055\033\056\031\001" +
    "\002\000\024\034\023\041\034\050\027\051\032\052\025" +
    "\053\024\054\030\055\033\056\031\001\002\000\024\034" +
    "\023\041\034\050\027\051\032\052\025\053\024\054\030" +
    "\055\033\056\031\001\002\000\024\034\023\041\034\050" +
    "\027\051\032\052\025\053\024\054\030\055\033\056\031" +
    "\001\002\000\024\034\023\041\034\050\027\051\032\052" +
    "\025\053\024\054\030\055\033\056\031\001\002\000\024" +
    "\034\023\041\034\050\027\051\032\052\025\053\024\054" +
    "\030\055\033\056\031\001\002\000\024\034\023\041\034" +
    "\050\027\051\032\052\025\053\024\054\030\055\033\056" +
    "\031\001\002\000\024\034\023\041\034\050\027\051\032" +
    "\052\025\053\024\054\030\055\033\056\031\001\002\000" +
    "\024\034\023\041\034\050\027\051\032\052\025\053\024" +
    "\054\030\055\033\056\031\001\002\000\024\034\023\041" +
    "\034\050\027\051\032\052\025\053\024\054\030\055\033" +
    "\056\031\001\002\000\046\005\uffbe\014\uffbe\022\uffbe\027" +
    "\uffbe\031\uffbe\032\uffbe\033\042\034\037\035\046\036\044" +
    "\037\036\040\uffbe\042\045\043\040\044\050\045\043\046" +
    "\041\047\047\001\002\000\032\005\uffbb\014\uffbb\022\uffbb" +
    "\027\uffbb\031\uffbb\032\uffbb\033\042\034\037\035\046\036" +
    "\044\037\uffbb\040\uffbb\001\002\000\032\005\uffb8\014\uffb8" +
    "\022\uffb8\027\uffb8\031\uffb8\032\uffb8\033\042\034\037\035" +
    "\046\036\044\037\uffb8\040\uffb8\001\002\000\046\005\uffc1" +
    "\014\uffc1\022\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\001\002\000\032\005" +
    "\uffbd\014\uffbd\022\uffbd\027\uffbd\031\uffbd\032\uffbd\033\042" +
    "\034\037\035\046\036\044\037\uffbd\040\uffbd\001\002\000" +
    "\046\005\uffc0\014\uffc0\022\uffc0\027\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\001\002" +
    "\000\032\005\uffba\014\uffba\022\uffba\027\uffba\031\uffba\032" +
    "\uffba\033\042\034\037\035\046\036\044\037\uffba\040\uffba" +
    "\001\002\000\046\005\uffc3\014\uffc3\022\uffc3\027\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\037\035\046\036\044\037\uffc3" +
    "\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\001\002\000\032\005\uffb9\014\uffb9\022\uffb9\027\uffb9" +
    "\031\uffb9\032\uffb9\033\042\034\037\035\046\036\044\037" +
    "\uffb9\040\uffb9\001\002\000\032\005\uffbc\014\uffbc\022\uffbc" +
    "\027\uffbc\031\uffbc\032\uffbc\033\042\034\037\035\046\036" +
    "\044\037\uffbc\040\uffbc\001\002\000\046\005\uffc2\014\uffc2" +
    "\022\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034\037\035" +
    "\046\036\044\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\001\002\000\046\005\uffbf\014" +
    "\uffbf\022\uffbf\027\uffbf\031\uffbf\032\uffbf\033\042\034\037" +
    "\035\046\036\044\037\uffbf\040\uffbf\042\045\043\040\044" +
    "\050\045\043\046\041\047\047\001\002\000\026\027\071" +
    "\034\023\041\034\050\027\051\032\052\025\053\024\054" +
    "\030\055\033\056\031\001\002\000\042\005\uffce\027\uffce" +
    "\031\073\032\uffce\033\042\034\037\035\046\036\044\037" +
    "\036\040\051\042\045\043\040\044\050\045\043\046\041" +
    "\047\047\001\002\000\004\027\072\001\002\000\046\005" +
    "\uffc4\014\uffc4\022\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\001\002\000\046" +
    "\005\uffc5\014\uffc5\022\uffc5\027\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\001\002\000" +
    "\024\034\023\041\034\050\027\051\032\052\025\053\024" +
    "\054\030\055\033\056\031\001\002\000\010\005\uffcd\027" +
    "\uffcd\032\uffcd\001\002\000\046\005\uffb7\014\uffb7\022\uffb7" +
    "\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\037\035\046\036" +
    "\044\037\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\001\002\000\024\034\023\041\034\050" +
    "\027\051\032\052\025\053\024\054\030\055\033\056\031" +
    "\001\002\000\036\031\ufff4\032\ufff4\033\042\034\037\035" +
    "\046\036\044\037\036\040\051\042\045\043\040\044\050" +
    "\045\043\046\041\047\047\001\002\000\004\002\001\001" +
    "\002\000\004\055\104\001\002\000\006\002\ufffc\004\101" +
    "\001\002\000\004\002\ufffb\001\002\000\004\026\105\001" +
    "\002\000\014\006\013\007\012\010\011\011\007\027\110" +
    "\001\002\000\004\055\231\001\002\000\006\027\235\032" +
    "\234\001\002\000\014\006\013\007\012\010\011\011\007" +
    "\012\115\001\002\000\006\027\uffe8\032\uffe8\001\002\000" +
    "\006\030\uffec\031\uffec\001\002\000\004\030\120\001\002" +
    "\000\006\030\uffee\031\116\001\002\000\006\030\uffeb\031" +
    "\uffeb\001\002\000\014\006\013\007\012\010\011\011\007" +
    "\012\115\001\002\000\004\030\uffed\001\002\000\026\006" +
    "\013\007\012\010\011\011\007\013\uffff\016\uffff\020\uffff" +
    "\021\uffff\055\uffff\057\uffff\001\002\000\016\013\133\016" +
    "\122\020\123\021\127\055\132\057\140\001\002\000\004" +
    "\026\230\001\002\000\034\013\133\016\122\020\123\021" +
    "\127\034\023\041\034\050\027\051\032\052\025\053\024" +
    "\054\030\055\212\056\031\001\002\000\004\032\210\001" +
    "\002\000\004\032\207\001\002\000\004\032\206\001\002" +
    "\000\024\034\023\041\034\050\027\051\032\052\025\053" +
    "\024\054\030\055\033\056\031\001\002\000\004\032\167" +
    "\001\002\000\004\057\163\001\002\000\010\017\uffe5\026" +
    "\157\031\uffe5\001\002\000\004\026\154\001\002\000\004" +
    "\032\153\001\002\000\006\017\150\031\147\001\002\000" +
    "\004\032\146\001\002\000\026\013\133\015\uffe3\016\122" +
    "\020\123\021\127\023\uffe3\024\uffe3\025\uffe3\055\132\057" +
    "\uffe3\001\002\000\026\005\uffe9\034\023\041\034\050\027" +
    "\051\032\052\025\053\024\054\030\055\033\056\031\001" +
    "\002\000\004\005\uffea\001\002\000\004\005\143\001\002" +
    "\000\004\032\144\001\002\000\006\002\uffef\004\uffef\001" +
    "\002\000\014\015\uffe2\023\uffe2\024\uffe2\025\uffe2\057\uffe2" +
    "\001\002\000\026\013\uffde\015\uffde\016\uffde\020\uffde\021" +
    "\uffde\023\uffde\024\uffde\025\uffde\055\uffde\057\uffde\001\002" +
    "\000\004\055\152\001\002\000\024\034\023\041\034\050" +
    "\027\051\032\052\025\053\024\054\030\055\033\056\031" +
    "\001\002\000\004\032\uffd1\001\002\000\012\017\uffe4\027" +
    "\uffe4\031\uffe4\032\uffe4\001\002\000\026\013\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\055" +
    "\uffdf\057\uffdf\001\002\000\024\034\023\041\034\050\027" +
    "\051\032\052\025\053\024\054\030\055\033\056\031\001" +
    "\002\000\004\027\156\001\002\000\004\032\uffd2\001\002" +
    "\000\026\027\161\034\023\041\034\050\027\051\032\052" +
    "\025\053\024\054\030\055\033\056\031\001\002\000\004" +
    "\027\162\001\002\000\004\032\uffcf\001\002\000\004\032" +
    "\uffd0\001\002\000\026\005\uffe9\034\023\041\034\050\027" +
    "\051\032\052\025\053\024\054\030\055\033\056\031\001" +
    "\002\000\004\005\165\001\002\000\004\032\166\001\002" +
    "\000\006\002\ufff1\004\ufff1\001\002\000\026\013\uffdd\015" +
    "\uffdd\016\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\055\uffdd\057\uffdd\001\002\000\034\022\171\033\042\034" +
    "\037\035\046\036\044\037\036\040\051\042\045\043\040" +
    "\044\050\045\043\046\041\047\047\001\002\000\014\013" +
    "\133\016\122\020\123\021\127\055\132\001\002\000\010" +
    "\023\uffd8\024\uffd8\025\174\001\002\000\006\023\uffd5\024" +
    "\202\001\002\000\024\034\023\041\034\050\027\051\032" +
    "\052\025\053\024\054\030\055\033\056\031\001\002\000" +
    "\010\023\uffd8\024\uffd8\025\174\001\002\000\006\023\uffd7" +
    "\024\uffd7\001\002\000\034\022\200\033\042\034\037\035" +
    "\046\036\044\037\036\040\051\042\045\043\040\044\050" +
    "\045\043\046\041\047\047\001\002\000\014\013\133\016" +
    "\122\020\123\021\127\055\132\001\002\000\010\023\uffd6" +
    "\024\uffd6\025\uffd6\001\002\000\014\013\133\016\122\020" +
    "\123\021\127\055\132\001\002\000\004\023\204\001\002" +
    "\000\004\032\uffd9\001\002\000\004\023\uffd4\001\002\000" +
    "\026\013\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\055\uffe1\057\uffe1\001\002\000\026\013" +
    "\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\055\uffdc\057\uffdc\001\002\000\026\013\uffe0\015" +
    "\uffe0\016\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\055\uffe0\057\uffe0\001\002\000\034\014\225\033\042\034" +
    "\037\035\046\036\044\037\036\040\051\042\045\043\040" +
    "\044\050\045\043\046\041\047\047\001\002\000\042\014" +
    "\uffc6\017\uffe5\026\221\031\uffe5\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\001\002\000\004\057\214\001\002" +
    "\000\024\034\023\041\034\050\027\051\032\052\025\053" +
    "\024\054\030\055\033\056\031\001\002\000\034\014\216" +
    "\033\042\034\037\035\046\036\044\037\036\040\051\042" +
    "\045\043\040\044\050\045\043\046\041\047\047\001\002" +
    "\000\014\013\133\016\122\020\123\021\127\055\132\001" +
    "\002\000\004\015\220\001\002\000\004\032\uffdb\001\002" +
    "\000\026\027\223\034\023\041\034\050\027\051\032\052" +
    "\025\053\024\054\030\055\033\056\031\001\002\000\004" +
    "\027\224\001\002\000\036\014\uffc4\032\uffcf\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\001\002\000\036\014" +
    "\uffc5\032\uffd0\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\001\002\000\014\013\133\016\122\020\123\021\127" +
    "\055\132\001\002\000\004\015\227\001\002\000\004\032" +
    "\uffda\001\002\000\004\055\231\001\002\000\010\027\uffe5" +
    "\031\uffe5\032\uffe5\001\002\000\006\027\233\031\147\001" +
    "\002\000\004\032\uffd3\001\002\000\012\006\013\007\012" +
    "\010\011\011\007\001\002\000\014\006\013\007\012\010" +
    "\011\011\007\012\115\001\002\000\004\030\237\001\002" +
    "\000\026\006\013\007\012\010\011\011\007\013\uffff\016" +
    "\uffff\020\uffff\021\uffff\055\uffff\057\uffff\001\002\000\016" +
    "\013\133\016\122\020\123\021\127\055\132\057\242\001" +
    "\002\000\004\057\246\001\002\000\026\005\uffe9\034\023" +
    "\041\034\050\027\051\032\052\025\053\024\054\030\055" +
    "\033\056\031\001\002\000\004\005\244\001\002\000\004" +
    "\032\245\001\002\000\006\002\ufff0\004\ufff0\001\002\000" +
    "\026\005\uffe9\034\023\041\034\050\027\051\032\052\025" +
    "\053\024\054\030\055\033\056\031\001\002\000\004\005" +
    "\250\001\002\000\004\032\251\001\002\000\006\002\ufff2" +
    "\004\ufff2\001\002\000\006\027\uffe7\032\uffe7\001\002\000" +
    "\010\027\uffe6\031\147\032\uffe6\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\012\002\003\003\007\004\004\022\005\001" +
    "\001\000\002\001\001\000\006\007\101\012\077\001\001" +
    "\000\004\010\015\001\001\000\002\001\001\000\010\003" +
    "\007\004\013\022\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\025\001\001\000\004\011" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\034" +
    "\001\001\000\002\001\001\000\004\011\064\001\001\000" +
    "\004\011\063\001\001\000\004\011\062\001\001\000\004" +
    "\011\061\001\001\000\004\011\060\001\001\000\004\011" +
    "\057\001\001\000\004\011\056\001\001\000\004\011\055" +
    "\001\001\000\004\011\054\001\001\000\004\011\053\001" +
    "\001\000\004\011\052\001\001\000\004\011\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\067" +
    "\011\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\073\011\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\101\012\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\106\020\110\022\105" +
    "\001\001\000\004\021\252\001\001\000\002\001\001\000" +
    "\010\014\112\017\113\022\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\116\017\113\022\111\001\001" +
    "\000\002\001\001\000\010\003\007\004\120\022\005\001" +
    "\001\000\024\006\124\015\130\021\134\023\127\024\125" +
    "\025\123\026\133\027\135\033\136\001\001\000\002\001" +
    "\001\000\026\006\124\011\210\015\212\021\134\023\127" +
    "\024\125\025\123\026\133\027\135\033\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\124\015\144\021" +
    "\134\023\127\024\125\025\123\026\133\027\135\033\136" +
    "\001\001\000\010\005\140\011\066\016\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\150\011\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\154\011" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\157\011\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\140\011\066\016\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\124" +
    "\015\171\021\134\023\127\024\125\025\123\026\133\027" +
    "\135\033\136\001\001\000\006\030\172\031\174\001\001" +
    "\000\004\032\202\001\001\000\004\011\176\001\001\000" +
    "\006\030\175\031\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\124\015\200\021\134\023\127\024" +
    "\125\025\123\026\133\027\135\033\136\001\001\000\002" +
    "\001\001\000\024\006\124\015\204\021\134\023\127\024" +
    "\125\025\123\026\133\027\135\033\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\214\001" +
    "\001\000\002\001\001\000\024\006\124\015\216\021\134" +
    "\023\127\024\125\025\123\026\133\027\135\033\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\221" +
    "\011\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\124\015\225\021\134\023\127" +
    "\024\125\025\123\026\133\027\135\033\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\251\022\105\001\001\000\010\014\235\017\113" +
    "\022\111\001\001\000\002\001\001\000\010\003\007\004" +
    "\237\022\005\001\001\000\024\006\124\015\240\021\134" +
    "\023\127\024\125\025\123\026\133\027\135\033\136\001" +
    "\001\000\002\001\001\000\010\005\140\011\066\016\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\140\011\066\016\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              ProgramNode RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VariableDeclarationNode> vl = (List<VariableDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ProcedureNode> pl = (List<ProcedureNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramNode(vl,pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              List<VariableDeclarationNode> RESULT =null;
		 RESULT = new LinkedList<VariableDeclarationNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              List<VariableDeclarationNode> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclarationNode vd = (VariableDeclarationNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDeclarationNode> vl = (List<VariableDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vl.add(vd); RESULT = vl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarDecl ::= Type IdListInit SEMI 
            {
              VariableDeclarationNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<IdInitializerNode> idl = (List<IdInitializerNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VariableDeclarationNode(t,idl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc 
            {
              List<ProcedureNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureNode p = (ProcedureNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<ProcedureNode> pl = new LinkedList<ProcedureNode>(); pl.add(p); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProcList ::= Proc ProcList 
            {
              List<ProcedureNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcedureNode p = (ProcedureNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ProcedureNode> pl = (List<ProcedureNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pl.add(0,p); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Symbols.INT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Symbols.BOOL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Symbols.FLOAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Symbols.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              List<IdInitializerNode> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<IdInitializerNode> idl = new LinkedList<IdInitializerNode>(); idl.add( new IdInitializerNode(new IdentifierExpression(ileft,i,iright))); RESULT = idl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= IdListInit COMMA ID 
            {
              List<IdInitializerNode> RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<IdInitializerNode> idl = (List<IdInitializerNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idl.add(new IdInitializerNode(new IdentifierExpression(ileft,i,iright))); RESULT = idl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID ASSIGN Expr 
            {
              List<IdInitializerNode> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<IdInitializerNode> idl = new LinkedList<IdInitializerNode>(); idl.add( new IdInitializerNode(new IdentifierExpression(ileft,i,iright),e)); RESULT = idl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              List<IdInitializerNode> RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<IdInitializerNode> idl = (List<IdInitializerNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idl.add( new IdInitializerNode(new IdentifierExpression(ileft,i,iright),e)); RESULT = idl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcedureNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<ParameterDeclarationNode> pdl = (List<ParameterDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Integer> rtl = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<VariableDeclarationNode> vdl = (List<VariableDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<StatementNode> stl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ExpressionNode> rexpr = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ProcedureBodyNode body = new ProcedureBodyNode(vdl,stl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(ileft,i,iright),pdl,rtl,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcedureNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Integer> rtl = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<VariableDeclarationNode> vdl = (List<VariableDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<StatementNode> stl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ExpressionNode> rexpr = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ProcedureBodyNode body = new ProcedureBodyNode(vdl,stl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(ileft,i,iright),rtl,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcedureNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<ParameterDeclarationNode> pdl = (List<ParameterDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Integer> rtl = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<VariableDeclarationNode> vdl = (List<VariableDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ExpressionNode> rexpr = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ProcedureBodyNode body = new ProcedureBodyNode(vdl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(ileft,i,iright),pdl,rtl,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcedureNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int rtlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int rtlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Integer> rtl = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<VariableDeclarationNode> vdl = (List<VariableDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ExpressionNode> rexpr = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ProcedureBodyNode body = new ProcedureBodyNode(vdl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(ileft,i,iright),rtl,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResultTypeList ::= ResultType 
            {
              List<Integer> RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Integer> rlt = new LinkedList<Integer>(); rlt.add(rt); RESULT = rlt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResultTypeList ::= ResultType COMMA ResultTypeList 
            {
              List<Integer> RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Integer> rlt = (List<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 rlt.add(0,rt); RESULT = rlt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ResultType ::= Type 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ResultType ::= VOID 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Symbols.VOID; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ReturnExprs ::= ExprList 
            {
              List<ExpressionNode> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ReturnExprs ::= 
            {
              List<ExpressionNode> RESULT =null;
		 RESULT = new LinkedList<ExpressionNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= ParDecl 
            {
              List<ParameterDeclarationNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterDeclarationNode p = (ParameterDeclarationNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<ParameterDeclarationNode> pl = new LinkedList<ParameterDeclarationNode>(); pl.add(p); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              List<ParameterDeclarationNode> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ParameterDeclarationNode> pl = (List<ParameterDeclarationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterDeclarationNode p = (ParameterDeclarationNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pl.add(p); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecl ::= Type IdList 
            {
              ParameterDeclarationNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<IdentifierExpression> i = (List<IdentifierExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParameterDeclarationNode(t,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdList ::= ID 
            {
              List<IdentifierExpression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<IdentifierExpression> idl = new LinkedList<IdentifierExpression>(); idl.add(new IdentifierExpression(ileft,i,iright)); RESULT = idl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdList ::= IdList COMMA ID 
            {
              List<IdentifierExpression> RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<IdentifierExpression> idl = (List<IdentifierExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idl.add(new IdentifierExpression(ileft,i,iright)); RESULT = idl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatList ::= Stat 
            {
              List<StatementNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<StatementNode> sl = new LinkedList<StatementNode>(); sl.add(s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatList ::= Stat StatList 
            {
              List<StatementNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(0,s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= IfStat SEMI 
            {
              StatementNode RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfStatement ifs = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ifs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= WhileStat SEMI 
            {
              StatementNode RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileStatement wl = (WhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = wl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= ReadlnStat SEMI 
            {
              StatementNode RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStatement rs = (ReadStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = rs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WriteStat SEMI 
            {
              StatementNode RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStatement ws = (WriteStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= AssignStat SEMI 
            {
              StatementNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStatement as = (AssignStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= CallProc SEMI 
            {
              StatementNode RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CallProcedureStatement cp = (CallProcedureStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = cp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              WhileStatement RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<StatementNode> stl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<StatementNode> stl2 = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileStatement(stl,e,stl2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<StatementNode> stl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileStatement(e,stl); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<StatementNode> stl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eliright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ElifStatement> eli = (List<ElifStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<StatementNode> el = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IfStatement(e,stl,eli,el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElifList ::= 
            {
              List<ElifStatement> RESULT =null;
		 RESULT = new LinkedList<ElifStatement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElifList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElifList ::= Elif ElifList 
            {
              List<ElifStatement> RESULT =null;
		int elileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eliright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElifStatement eli = (ElifStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eliflleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eliflright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ElifStatement> elifl = (List<ElifStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elifl.add(0,eli); RESULT = elifl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElifList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Elif ::= ELIF Expr THEN StatList 
            {
              ElifStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<StatementNode> st = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElifStatement(e,st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= 
            {
              List<StatementNode> RESULT =null;
		 RESULT = new LinkedList<StatementNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= ELSE StatList 
            {
              List<StatementNode> RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<StatementNode> stl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadStatement RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<IdentifierExpression> idl = (List<IdentifierExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadStatement(idl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteStatement RESULT =null;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ExpressionNode> exprl = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteStatement(exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStatement RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<IdentifierExpression> idl = (List<IdentifierExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ExpressionNode> expr = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStatement(idl,expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProcedureStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ExpressionNode> exprl = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallProcedureStatement(new IdentifierExpression(ileft,i,iright),exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallProc",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CallProc ::= ID LPAR RPAR 
            {
              CallProcedureStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallProcedureStatement(new IdentifierExpression(ileft,i,iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallProc",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExprList ::= Expr 
            {
              List<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<ExpressionNode> el = new LinkedList<ExpressionNode>(); el.add(e); RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExprList ::= Expr COMMA ExprList 
            {
              List<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 el.add(0,e); RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= NULL 
            {
              ExpressionNode RESULT =null;
		 RESULT = new NullConstant(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              ExpressionNode RESULT =null;
		 RESULT = new BooleanConstant(true);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              ExpressionNode RESULT =null;
		 RESULT = new BooleanConstant(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= INT_CONST 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConstant(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= FLOAT_CONST 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatConstant(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= STRING_CONST 
            {
              ExpressionNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConstant(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExpression(ileft,i,iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= ID LPAR ExprList RPAR 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ExpressionNode> exprl = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallProcedureExpression(new IdentifierExpression(ileft,i,iright),exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= ID LPAR RPAR 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallProcedureExpression(new IdentifierExpression(ileft,i,iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr PLUS Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.PLUS,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr MINUS Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.MINUS,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr TIMES Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.TIMES,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr DIV Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.DIV,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr AND Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.AND,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr OR Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.OR,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr GT Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.GT,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr GE Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.GE,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr LT Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.LT,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr LE Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.LE,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr EQ Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.EQ,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr NE Expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1,Symbols.NE,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= MINUS Expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(Symbols.MINUS,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= NOT Expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(Symbols.NOT,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
