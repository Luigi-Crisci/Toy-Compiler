// CUP specification for a simple expression evaluator (no actions)
package parser;

import java_cup.runtime.*;
import parser.nodes.*;
import java.util.*;
import lexer.*;
import parser.nodes.ExpressionNode.*;
import parser.nodes.StatementNode.*;
import common.*;

parser code {:
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }
:};


/* Terminals (tokens returned by the scanner). */
terminal            PROC, CORP, MAIN; 
terminal Integer 	INT, FLOAT, BOOL, STRING, VOID; //Type
terminal			WRITE, DO, OD, READ, ASSIGN, WHILE, IF, THEN, FI, ELSE, ELIF; //Statements
terminal            LPAR, RPAR, COLON, COMMA, SEMI; //Separators

terminal			PLUS, MINUS, TIMES, DIV; //Math  operators
terminal 			AND, OR, NOT, GT, GE, LT, LE, EQ, NE, TRUE, FALSE; //Logics
terminal Integer	INT_CONST;
terminal Float 		FLOAT_CONST;
terminal String 	STRING_CONST, ID;
terminal			NULL;

terminal            RETURN; /* RETURN PATTERN IS "->" */

/* Non terminals */
non terminal	ProgramNode						Program;
non terminal	VariableDeclarationNode			VarDecl;
non terminal	List<VariableDeclarationNode>	VarDeclList;
non terminal    List<ExpressionNode>        	ExprList;
non terminal	CallProcedureStatement			CallProc;
non terminal	ProcedureNode					Proc;
non terminal	ProcedureNode					Main;    //this might change
non terminal	List<IdInitializerNode>			IdListInit;
non terminal    ExpressionNode        			Expr;
non terminal	List<ProcedureNode>				ProcList;
non terminal	List<ParameterDeclarationNode>	ParamDeclList;
non terminal	List<Integer>		 			ResultTypeList;
non terminal	List<StatementNode>            	StatList;
non terminal	List<ExpressionNode>		 	ReturnExprs;
non terminal	Integer							ResultType;
non terminal	ParameterDeclarationNode		ParDecl;
non terminal	List<IdentifierExpression>		IdList;
non terminal	Integer							Type;
non terminal	AssignStatement					AssignStat;
non terminal	IfStatement						IfStat;
non terminal	WhileStatement					WhileStat;
non terminal	ReadStatement					ReadlnStat;
non terminal	WriteStatement					WriteStat;
non terminal	List<ElifStatement>            	ElifList;
non terminal	ElifStatement					Elif;
non terminal	List<StatementNode>				Else;
non terminal	StatementNode					Stat;

/* Precedences */
precedence left OR;
precedence left AND;
precedence nonassoc GT, GE, LT, LE, EQ, NE;
precedence right ASSIGN;
precedence left PLUS;
precedence right MINUS;
precedence left TIMES, DIV;

/* The grammar */
Program ::= VarDeclList:vl ProcList:pl		 	{: RESULT = new ProgramNode(vl,pl); :}
    ;

VarDeclList ::= /* empty */ 					{: RESULT = new LinkedList<VariableDeclarationNode>(); :}
	| VarDecl:vd VarDeclList:vl					{: vl.add(0,vd); RESULT = vl; :}
	;

VarDecl ::= Type:t IdListInit:idl SEMI			{: RESULT = new VariableDeclarationNode(t,idl); :}
    ;

ProcList ::= Main:m 							{: List<ProcedureNode> pl = new LinkedList<ProcedureNode>(); pl.add(m); RESULT = pl; :}						
	| Proc:p ProcList:pl						{: pl.add(0,p); RESULT = pl; :}
	;


Type ::= INT:i									{: RESULT = Symbols.INT; :}
		| BOOL:b 								{: RESULT = Symbols.BOOL; :}
		| FLOAT:f								{: RESULT = Symbols.FLOAT; :}
		| STRING:s								{: RESULT = Symbols.STRING; :}		
    ;

IdListInit ::= ID:i 												{: List<IdInitializerNode> idl = new LinkedList<IdInitializerNode>(); idl.add( new IdInitializerNode(new IdentifierExpression(i,ixleft,ixright))); RESULT = idl; :}
	| IdListInit:idl COMMA ID:i										{: idl.add(new IdInitializerNode(new IdentifierExpression(i,ixleft,ixright))); RESULT = idl; :}
	| ID:i ASSIGN Expr:e											{: List<IdInitializerNode> idl = new LinkedList<IdInitializerNode>(); idl.add( new IdInitializerNode(new IdentifierExpression(i,ixleft,ixright),e)); RESULT = idl; :}
	| IdListInit:idl COMMA ID:i ASSIGN Expr:e						{: idl.add( new IdInitializerNode(new IdentifierExpression(i,ixleft,ixright),e)); RESULT = idl; :}
    ;

Proc ::= PROC ID:i LPAR ParamDeclList:pdl RPAR ResultTypeList:rtl COLON
		VarDeclList:vdl StatList:stl RETURN ReturnExprs:rexpr CORP SEMI			{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,stl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(i,ixleft,ixright),pdl,rtl,body); :}
	| PROC ID:i LPAR RPAR ResultTypeList:rtl COLON 									
		VarDeclList:vdl StatList:stl RETURN ReturnExprs:rexpr CORP SEMI			{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,stl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(i,ixleft,ixright),rtl,body); :}
	|	PROC ID:i LPAR ParamDeclList:pdl RPAR ResultTypeList:rtl COLON 
		VarDeclList:vdl RETURN ReturnExprs:rexpr CORP SEMI						{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(i,ixleft,ixright),pdl,rtl,body); :}
	| PROC ID:i LPAR RPAR ResultTypeList:rtl COLON 
		VarDeclList:vdl RETURN ReturnExprs:rexpr CORP SEMI						{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,rexpr);  RESULT = new ProcedureNode( new IdentifierExpression(i,ixleft,ixright),rtl,body); :}
	;    


Main ::= PROC MAIN:m LPAR ParamDeclList:pdl RPAR INT COLON
		VarDeclList:vdl StatList:stl RETURN ReturnExprs:rexpr CORP SEMI			{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,stl,rexpr); List<Integer> rlt = new LinkedList<Integer>(); rlt.add(Symbols.INT); RESULT = new ProcedureNode( new IdentifierExpression("main",mxleft,mxright),pdl,rlt,body); :}
	| PROC MAIN:m LPAR RPAR INT COLON 									
		VarDeclList:vdl StatList:stl RETURN ReturnExprs:rexpr CORP SEMI			{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,stl,rexpr); List<Integer> rlt = new LinkedList<Integer>(); rlt.add(Symbols.INT); RESULT = new ProcedureNode( new IdentifierExpression("main",mxleft,mxright),rlt,body); :}
	|	PROC MAIN:m LPAR ParamDeclList:pdl RPAR INT COLON 
		VarDeclList:vdl RETURN ReturnExprs:rexpr CORP SEMI						{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,rexpr); List<Integer> rlt = new LinkedList<Integer>(); rlt.add(Symbols.INT); RESULT = new ProcedureNode( new IdentifierExpression("main",mxleft,mxright),pdl,rlt,body); :}
	| PROC MAIN:m LPAR RPAR INT COLON 
		VarDeclList:vdl RETURN ReturnExprs:rexpr CORP SEMI						{: ProcedureBodyNode body = new ProcedureBodyNode(vdl,rexpr); List<Integer> rlt = new LinkedList<Integer>(); rlt.add(Symbols.INT); RESULT = new ProcedureNode( new IdentifierExpression("main",mxleft,mxright),rlt,body); :}
	;

ResultTypeList ::= ResultType:rt					{: List<Integer> rlt = new LinkedList<Integer>(); rlt.add(rt); RESULT = rlt; :}
	| ResultType:rt COMMA ResultTypeList:rlt		{: rlt.add(0,rt); RESULT = rlt; :}
    ;

ResultType ::= Type:t								{: RESULT = t; :}
		| VOID:v 									{: RESULT = Symbols.VOID; :}
    ;

ReturnExprs::=  ExprList:el							{: RESULT = el; :} 						
	| /* empty */ 									{: RESULT = new LinkedList<ExpressionNode>(); :}
    ;


ParamDeclList ::= ParDecl:p 						{: List<ParameterDeclarationNode> pl = new LinkedList<ParameterDeclarationNode>(); pl.add(p); RESULT = pl; :}
	| ParamDeclList:pl SEMI ParDecl:p				{: pl.add(p); RESULT = pl; :}
    ;

ParDecl ::= Type:t IdList:i							{: RESULT = new ParameterDeclarationNode(t,i); :}
    ;

IdList ::= ID:i										{: List<IdentifierExpression> idl = new LinkedList<IdentifierExpression>(); idl.add(new IdentifierExpression(i,ixleft,ixright)); RESULT = idl; :}
	| IdList:idl COMMA ID:i							{: idl.add(new IdentifierExpression(i,ixleft,ixright)); RESULT = idl; :}
    ;


StatList ::= Stat:s 								{: List<StatementNode> sl = new LinkedList<StatementNode>(); sl.add(s); RESULT = sl; :}
	| Stat:s StatList:sl 							{: sl.add(0,s); RESULT = sl; :}
    ;

Stat ::= IfStat:ifs SEMI							{: RESULT = ifs; :}
	| WhileStat:wl SEMI								{: RESULT = wl; :}
	| ReadlnStat:rs SEMI							{: RESULT = rs; :}
	| WriteStat:ws SEMI								{: RESULT = ws; :}
	| AssignStat:as SEMI							{: RESULT = as; :}
	| CallProc:cp SEMI								{: RESULT = cp; :}
    ;

WhileStat ::= WHILE StatList:stl RETURN Expr:e DO StatList:stl2 OD 			{: RESULT = new WhileStatement(stl,e,stl2); :}
	| WHILE Expr:e DO StatList:stl OD										{: RESULT = new WhileStatement(e,stl); 	:}
	;

IfStat ::= IF Expr:e THEN StatList:stl ElifList:eli Else:el FI				{: RESULT = new IfStatement(e,stl,eli,el); :}
	;

ElifList ::= /* empty */ 								{: RESULT = new LinkedList<ElifStatement>(); :}
	| Elif:eli ElifList:elifl							{: elifl.add(0,eli); RESULT = elifl; :}	   		 
	;

Elif ::= ELIF Expr:e THEN StatList:st					{: RESULT = new ElifStatement(e,st); :}
    ;

Else ::= /* empty */									{: RESULT = new LinkedList<StatementNode>(); :} 
		| ELSE StatList:stl								{: RESULT = stl; :}
	;


ReadlnStat ::= READ:r LPAR IdList:idl RPAR				{: RESULT = new ReadStatement(idl); :}
    ;

WriteStat ::=  WRITE:w LPAR ExprList:exprl RPAR			{: RESULT = new WriteStatement(exprl); :}
    ;

AssignStat ::= IdList:idl ASSIGN:a ExprList:expr			{: RESULT = new AssignStatement(idl,expr); :}
    ;

CallProc ::= ID:i LPAR ExprList:exprl RPAR   					{: RESULT = new CallProcedureStatement(new IdentifierExpression(i,ixleft,ixright),exprl,ixleft,ixright); :}
	| ID:i LPAR RPAR   									{: RESULT = new CallProcedureStatement(new IdentifierExpression(i,ixleft,ixright),ixleft,ixright); :}
    ;

ExprList ::= Expr:e										{: List<ExpressionNode> el = new LinkedList<ExpressionNode>(); el.add(e); RESULT = el; :}
	| Expr:e COMMA ExprList:el							{: el.add(0,e); RESULT = el; :}
	;

	/* DUPLICATED CALL PROC */										
Expr ::= NULL:n											{: RESULT = new NullConstant(nxleft,nxright); :}                          					
	| TRUE:b											{: RESULT = new BooleanConstant(true,bxleft,bxright);  :}                            
	| FALSE:b											{: RESULT = new BooleanConstant(false,bxleft,bxright); :}                           
	| INT_CONST:i										{: RESULT = new IntegerConstant(i,ixleft,ixright); :}                    
	| FLOAT_CONST:f										{: RESULT = new FloatConstant(f,fxleft,fxright); :}
	| STRING_CONST:s									{: RESULT = new StringConstant(s,sxleft,sxright); :}
	| ID:i												{: RESULT = new IdentifierExpression(i,ixleft,ixright); :}	
    | ID:i LPAR ExprList:exprl RPAR   					{: RESULT = new CallProcedureExpression(new IdentifierExpression(i,ixleft,ixright),exprl,ixleft,ixright); :}
	| ID:i LPAR RPAR   									{: RESULT = new CallProcedureExpression(new IdentifierExpression(i,ixleft,ixright),ixleft,ixright); :}
	| Expr:e1  PLUS:o Expr:e2							{: RESULT = new BinaryExpression(e1,Symbols.PLUS,e2,oxright,oxleft); :}													
	| Expr:e1  MINUS:o Expr:e2							{: RESULT = new BinaryExpression(e1,Symbols.MINUS,e2,oxright,oxleft); :}				
	| Expr:e1  TIMES:o Expr:e2							{: RESULT = new BinaryExpression(e1,Symbols.TIMES,e2,oxright,oxleft); :}				
	| Expr:e1  DIV:o Expr:e2							{: RESULT = new BinaryExpression(e1,Symbols.DIV,e2,oxright,oxleft); :}				
	| Expr:e1  AND:o Expr:e2							{: RESULT = new BinaryExpression(e1,Symbols.AND,e2,oxright,oxleft); :}				
	| Expr:e1  OR:o Expr:e2								{: RESULT = new BinaryExpression(e1,Symbols.OR,e2,oxright,oxleft); :}				
	| Expr:e1  GT:o Expr:e2								{: RESULT = new BinaryExpression(e1,Symbols.GT,e2,oxright,oxleft); :}				
	| Expr:e1  GE:o Expr:e2								{: RESULT = new BinaryExpression(e1,Symbols.GE,e2,oxright,oxleft); :}				
	| Expr:e1  LT:o Expr:e2								{: RESULT = new BinaryExpression(e1,Symbols.LT,e2,oxright,oxleft); :}				
	| Expr:e1  LE:o Expr:e2								{: RESULT = new BinaryExpression(e1,Symbols.LE,e2,oxright,oxleft); :}				
	| Expr:e1  EQ:o Expr:e2								{: RESULT = new BinaryExpression(e1,Symbols.EQ,e2,oxright,oxleft); :}				
	| Expr:e1  NE:o Expr:e2								{: RESULT = new BinaryExpression(e1,Symbols.NE,e2,oxright,oxleft); :}				
	| MINUS:o Expr:e									{: RESULT = new UnaryExpression(Symbols.MINUS,e,oxright,oxleft); :}
	| NOT:o Expr:e										{: RESULT = new UnaryExpression(Symbols.NOT,e,oxright,oxleft); :}			
    ;